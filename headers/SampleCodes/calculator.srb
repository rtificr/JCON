`{
`LE
`A{
`A}
`LE
`D
`V
d1
`,
`D
`V
d2
`,
`C
`V
operator
`LE
`identifier
d1
`=
`F
INPUT_DOUBLE
`(
`S{
Number:- 
`S}
`)
`LE
`while{
`(
`E~{
`Bv
true
`E~}
`)
`LE
`identifier
operator
`=
`F
INPUT_CHAR
`(
`S{
Operator:- 
`S}
`)
`LE
`identifier
d2
`=
`F
INPUT_DOUBLE
`(
`S{
Number:- 
`S}
`)
`LE
`if{
`(
`E~{
`identifier
operator
`=
`Cv
+
`=
`E~}
`)
`LE
`identifier
d1
`=
`E~{
`identifier
d1
`identifier
d2
+
`E~}
`if}
`LE
`elif{
`(
`E~{
`identifier
operator
`=
`Cv
-
`=
`E~}
`)
`LE
`identifier
d1
`=
`E~{
`identifier
d1
`identifier
d2
-
`E~}
`elif}
`LE
`elif{
`(
`E~{
`identifier
operator
`=
`Cv
*
`=
`E~}
`)
`LE
`identifier
d1
`=
`E~{
`identifier
d1
`identifier
d2
*
`E~}
`elif}
`LE
`elif{
`(
`E~{
`identifier
operator
`=
`Cv
/
`=
`E~}
`)
`LE
`identifier
d1
`=
`E~{
`identifier
d1
`identifier
d2
/
`E~}
`elif}
`LE
`else{
`F
PRINTLN
`(
`S{
Invalid Operator Found!
`S}
`)
`LE
`Break
`else}
`LE
`F
PRINTLN
`(
`S{
Answer:- 
`S}
`,
`identifier
d1
`)
`while}
`}